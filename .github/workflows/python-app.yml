# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

# name: Python application

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# permissions:
#   contents: read

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4
#     - name: Set up Python 3.10
#       uses: actions/setup-python@v3
#       with:
#         python-version: "3.10"
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install pyinstaller
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
name: Build with PyInstaller (Multi-OS)

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch

jobs:
  build:
    runs-on: ${{ matrix.os }}  # Use the matrix to define the OS
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # Define the OSes to build on
        python-version: ['3.9']  # Define the Python version(s)

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}  # Use the Python version from the matrix

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Run PyInstaller to build the executable
      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile esp-firmware-update.py  # Replace with your script name

      # Upload the built executable as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}  # Unique artifact name for each OS
          path: dist/  # Path to the PyInstaller output directory